


  # Debouncing 
    
    - typing slow - 200ms
    - typing fast - 30ms

    - performance
       - iphone pro max -> 14 latter (14 API calls) * 1000 user = 14000 api calls
       - with debouncing -> 3 API calls * 1000 user = 3000 API calls


    - Debouncing with 200ms
      - if difference between 2 key strokes is < 200ms -> decline api call
      - if > 200ms make an api call  


    #Debouncing

      const [searchQuery, setSearchQuery] = useState("");

        useEffect(() => {
          //Make the API can on every keystroke
          // but decline API call if the difference between 2 API calls < 200ms

         const timer = setTimeout(() => getSearchSuggestion(), 200);
          return () => {
            clearTimeout(timer);
          };
        }, [searchQuery]);

        const getSearchSuggestion = async () => {
          const data = await fetch(YT_SEARCH_API + searchQuery);
          const json = await data.json();
        };  

      # How things work

        -> 
           Key - i
           re-renders the component  (because changing the searchQuery triggers the reconciliation cycle)
           useEffect()
           start timer -> makes an API call after 200ms

           - if we type/change state/searchQuery before 200ms complete

           Key - ip
           destroys the component because of re-render and (useEffect return is called because of unMounting) previous setTimeout is destroyed/canceled
           re-renders the component  (because changing the searchQuery triggers the reconciliation cycle)
           useEffect()
           start timer -> makes an API call after 200ms

           again new setTimeout is created              
 